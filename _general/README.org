* Installation instructions
** MSYS2
- Download installer from https://www.msys2.org
- Start installer as local admin
- Accept default installation folder ~C:\msys64~
- Once installation is finished, before clicking ~Next~, edit
  ~c:/msys64/etc/nsswitch.conf~ (see also cywgin documentation on
  [[https://cygwin.com/cygwin-ug-net/ntsec.html][nsswitch.conf]])
  #+begin_example
    # Begin /etc/nsswitch.conf
    passwd: files db
    group: files db
    db_enum: cache builtin
    db_home: /%H # home directory is $USERPROFILE formatted as POSIX path
    db_shell: cygwin desc
    db_gecos: cygwin desc
    # End /etc/nsswitch.conf
  #+end_example
  This will ensure that the user's home directories will be their Windows
  ~$USERPROFILE~ folders
- Close the shell (it's a local admin shell)
- Start a MSYS shell as normal user with ~c:\msys64\msys2_shell.cmd~ and run
  #+begin_src shell :exports code
    pacman -Syu
  #+end_src
  Follow instructions of killing the mintty window and restart the same MSYS
  shell again and run
  #+begin_src shell :exports code
    pacman -Su
  #+end_src
- Install software
  - mingw64/mingw-w64-x86_64-libxml2 # for eww in Emacs
  - mingw64/mingw-w64-x86_64-emacs
  - msys/openssh
  - msys/winpty
  - mingw64/mingw-w64-x86_64-enchant
  - mingw64/mingw-w64-x86_64-hunspell-en
  - msys/git
  - msys/git-flow
  - msys/unzip
  - msys/zip
  - not really useful if there is no mail sync: mingw64/mingw-w64-x86_64-msmtp

  - There's a ~mingw64/mingw-w64-x86_64-graphviz~ in mingw64 but no plantuml.
    Installing plantuml from scoop would pull in graphviz from scoop too, so
    no need to install graphviz from MSYS2.
  - Do not install ~mingw64/mingw-w64-x86_64-gnupg~: its default home
    directory does not match ~$HOME/.gnupg~ and there's MSYS2's gnupg already.
- Maybe [[http://imperfect.work/2015/10/03/git-perf-tuning/][sign all executables for a speed-up]]
- Maybe edit ~c:/msys64/etc/pacman.d/mirrorlist.mingw32~,
  ~c:/msys64/etc/pacman.d/mirrorlist.mingw64~ and
  ~c:/msys64/etc/pacman.d/mirrorlist.msys~ to put an European server on the
  top of the list of mirrors (inspired by this [[https://github.com/msys2/MSYS2-packages/issues/1884][msys2-packages #1884]] issue)
- Unzip [[https://github.com/Microsoft/Git-Credential-Manager-for-Windows][Git credential-manager for Windows]] (use the archive for custom
  installation needs) somewhere on your path.

** SCOOP
Some binaries will still be needed from Scoop:
Installed apps:

| Name               |          Version | Source        |    Updated |     Info |
|--------------------+------------------+---------------+------------+----------|
| 7zip               |            21.07 | main          | 2022-01-10 | 20:01:32 |
| copyq              |            5.0.0 | extras        | 2021-11-07 | 21:11:43 |
| delta              |           0.12.1 | main          | 2022-03-08 | 07:03:33 |
| dview              |            1.7.3 | scoop-buckets | 2021-05-18 | 10:05:35 |
| fd                 |            8.3.2 | main          | 2022-02-01 | 08:02:07 |
| flux               |            4.120 | extras        | 2021-06-24 | 07:06:09 |
| fsviewer           |              7.5 | extras        | 2021-01-12 | 07:01:13 |
| ghostscript        |           9.55.0 | main          | 2021-09-29 | 07:09:13 |
| git                | 2.36.0.windows.1 | main          | 2022-04-25 | 08:04:36 |
| graphviz           |             2.38 | main          | 2020-01-15 | 10:01:18 |
| greenshot          |         1.2.10.6 | extras        | 2020-01-13 | 12:01:05 |
| kdiff3             |            1.9.5 | extras        | 2022-03-09 | 08:03:02 |
| multicommander     |      11.6.0.2845 | extras        | 2022-01-25 | 07:01:57 |
| notepadplusplus    |              8.4 | extras        | 2022-04-27 | 09:04:18 |
| okular             |          21.12.3 | extras        | 2022-03-23 | 09:03:51 |
| omnisharp          |           1.38.2 | main          | 2022-03-29 | 14:03:43 |
| paint.net          |            4.3.7 | extras        | 2022-01-10 | 20:01:15 |
| pandoc             |             2.18 | main          | 2022-04-06 | 08:04:19 |
| pdf-xchange-editor |        9.3.361.0 | extras        | 2022-04-19 | 12:04:38 |
| pdftk              |             2.02 | main          | 2020-01-13 | 12:01:21 |
| plantuml           |         1.2022.4 | extras        | 2022-04-19 | 12:04:43 |
| restic             |           0.12.1 | main          | 2021-09-27 | 15:09:30 |
| ripgrep            |           13.0.0 | main          | 2021-06-21 | 09:06:48 |
| sioyek             |            1.2.0 | extras        | 2022-04-06 | 08:04:08 |
| smallcliutils      |                5 | scoop-buckets | 2021-12-02 | 12:12:17 |
| sumatrapdf         |            3.3.3 | extras        | 2021-07-26 | 08:07:20 |
| touchcursor        |            1.7.1 | extras        | 2021-11-30 | 10:11:25 |
| ugrep              |            3.7.9 | main          | 2022-04-19 | 10:04:05 |
| unison             |           2.52.0 | main          | 2022-03-28 | 11:03:21 |
| wincompose         |            0.9.6 | extras        | 2020-12-06 | 10:12:57 |
| winmerge           |          2.16.20 | extras        | 2022-04-28 | 07:04:52 |
| workrave           |          1.10.50 | extras        | 2022-04-25 | 08:04:29 |
| zoxide             |            0.8.1 | main          | 2022-04-25 | 09:04:29 |

Other apps to look at
- bat (e.g. for https://github.com/xwmx/nb)
- deepgit (git history browser)
- dotnet-sdk
- doublecmd
- dust
- fzf
- gitui
- julia (see also https://github.com/omlins/JustSayIt.jl)
- mobaxterm
- omnisharp
- roughgrep
- rclone
- sioyek (PDF viewer for technical documentation)
- sumatrapdf
- vcxsrv
- vlc
- winmerge
- zeal (documentation browser)

*** Scoop installation
See [[file:scoop.ps1][scoop.ps1]].

*** MultiCommander
When installing it, fix up some directories that are not under source control:
#+begin_src powershell :exports code
  if (!$scoop) {
    $scoop=Resolve-Path "$(scoop prefix scoop)\..\..\.."
  }
  $multicmdsrc="$scoop\apps\multicommander\current\Config.original"
  $multicmdest="$scoop\persist\multicommander\Config"
  Copy-Item -Path "$multicmdsrc\TOTD" -Destination "$multicmdest" -Recurse
  Copy-Item -Path "$multicmdsrc\Presets" -Destination "$multicmdest" -Recurse
  Copy-Item -Path "$multicmdsrc\CfgProfiles" -Destination "$multicmdest" -Recurse
#+end_src

MultiCommander's plugins are in a persisted directory, hence updated DLLs do
not automatically overwrite the existing DLLs.  To update them:
#+begin_src shell :exports code
  (cd "$SCOOP/apps/multicommander/current/Extensions.original" \
      && (tar cf - . | \
              tar xvf - --directory=../Extensions --keep-newer-files --exclude="*.xml" ))
#+end_src

* SSH & GPG setup
All sharing the same gpg-agent, incorporated in =~/.bash_profile=:
#+begin_src shell :exports code
  _gpg_tty=$(tty) && {
      # Setting GPG_TTY is recommended by GPG documentation
      export GPG_TTY=$_gpg_tty
      # Actually this isn't related to GPG, but we reuse the fact that we know
      # there's a TTY and that thus filename completion should be handled by the
      # interactive shell and thus on Windows, filename completion should be
      # case-insensitive:
      [ -n "$MSYSTEM" ] && bind "set completion-ignore-case on"
  }
  unset _gpg_tty
  # The test involving the gnupg_SSH_AUTH_SOCK_by variable is for the case where
  # the agent is started as gpg-agent --daemon /bin/sh, in which case the shell
  # inherits the SSH_AUTH_SOCK variable from the parent, gpg-agent
  #
  # echo 'enable-ssh-support:0:1' | gpgconf.exe --change-option gpg-agent
  # echo 'allow-emacs-pinentry:0:1' | gpgconf.exe --change-option gpg-agent
  #
  # See also https://opensource.com/article/19/4/gpg-subkeys-ssh or
  # https://incenp.org/notes/2015/gnupg-for-ssh-authentication.html how to use a
  # GPG key instead of separate SSH key as private key for logging in
  unset SSH_AGENT_PID
  if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
      # export SSH_AUTH_SOCK=$(gpg-connect-agent.exe 'getinfo ssh_socket_name' '/bye' \
      #                            | sed -n -s '/^D/s/^D //p' )
      #
      # gpgconf --list-dirs does not autostart gpg-agent.  There's
      # gpg-connect-agent /bye, but then there's little difference with above
      # except that we use a high-level command rather than manipulating output
      # with sed.
      if [ -n "$MSYSTEM" ]; then
          # Explicitly select MSYS2 gpg: otherwise -- if MINGW64 gpg is
          # installed, too -- MINGW64 gpg is selected but doesn't work.
          p=/usr/bin
      else
          p=""
      fi
      $p/gpg-connect-agent /bye # starts gpg-agent if needed
      export SSH_AUTH_SOCK="$($p/gpgconf --list-dirs agent-ssh-socket)"
      unset p
  fi
#+end_src

When password authentication is needed, but there is no terminal, ask the user
for password with popup dialog (also in =~/.bash_profile=, consider using
~git-askpass.exe~ from [[https://github.com/Microsoft/Git-Credential-Manager-for-Windows][Git credential-manager for Windows]]):
#+begin_src shell :exports code
  # For ssh-askpass emulation: if DISPLAY & SSH_ASKPASS are set, ssh will use
  # ssh-askpass if no TTY is available to query the password:
  _ssh_askpass="$HOME/bin/ssh-askpass-with-pinentry"
  if [ -x "$_ssh_askpass" ] ; then
      # Emacs would set DISPLAY to w32 anyway, so if it is unset, set it...
      [ -z "$DISPLAY" ] && export DISPLAY="w32"
      export SSH_ASKPASS=$_ssh_askpass
      # $_ssh_askpass content: with full paths so that
      # c:\msys64\msys\bin\sh -c '$_ssh_askpass prompt text'
      # works when called from cmd.exe (without valid PATH), too
      #
      ##!/bin/sh
      # pinentry=$(type -fp pinentry)
      # if [ -n "$pinentry" ]; then
      #     /usr/bin/cat <<EOF | "$pinentry" | /usr/bin/sed -n -e '/^OK/d' -e 's/^D //p'
      # SETDESC $@
      # SETPROMPT SSH Password
      # GETPIN
      # BYE
      # EOF
      # else
      #     echo "No pinentry program found" >&2
      #     exit 1
      # fi
  fi
  unset _ssh_askpass
#+end_src

* Prompt tweaks
1. Set variable identifying the chroot you work in (used in the prompt below):
   #+begin_src shell :exports code
     if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
         debian_chroot=$(cat /etc/debian_chroot)
     fi
   #+end_src
   I only kept this for reference in case I ever work on Debian.
2. Set a fancy prompt (non-color, unless we know we "want" color)
   #+begin_src shell :exports code
     case "$TERM" in
         xterm-color|*-256color) color_prompt=yes;;
     esac

     # uncomment for a colored prompt, if the terminal has the capability; turned
     # off by default to not distract the user: the focus in a terminal window
     # should be on the output of commands, not on the prompt
     #force_color_prompt=yes

     if [ -n "$force_color_prompt" ]; then
         if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
             # We have color support; assume it's compliant with Ecma-48
             # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
             # a case would tend to support setf rather than setaf.)
             color_prompt=yes
         else
             color_prompt=
         fi
     fi

     if [ "$color_prompt" = yes ]; then
         RS="\[\033[0m\]"    # reset
         HC="\[\033[1m\]"    # hicolor
         # UL="\[\033[4m\]"    # underline
         # INV="\[\033[7m\]"   # inverse background and foreground
         # FBLK="\[\033[30m\]" # foreground black
         # FRED="\[\033[31m\]" # foreground red
         FGRN="\[\033[32m\]" # foreground green
         FYEL="\[\033[33m\]" # foreground yellow
         FBLE="\[\033[34m\]" # foreground blue
         # FMAG="\[\033[35m\]" # foreground magenta
         FCYN="\[\033[36m\]" # foreground cyan
         # FWHT="\[\033[37m\]" # foreground white
         # BBLK="\[\033[40m\]" # background black
         # BRED="\[\033[41m\]" # background red
         # BGRN="\[\033[42m\]" # background green
         # BYEL="\[\033[43m\]" # background yellow
         # BBLE="\[\033[44m\]" # background blue
         # BMAG="\[\033[45m\]" # background magenta
         # BCYN="\[\033[46m\]" # background cyan
         # BWHT="\[\033[47m\]" # background white
         # cyan is 6 (man terminfo)
         # $(tput setaf 6)
     else
         RS=""   # reset
         HC=""   # hicolor
         FGRN="" # foreground green
         FYEL="" # foreground yellow
         FBLE="" # foreground blue
         FCYN="" # foreground cyan
     fi
     unset color_prompt force_color_prompt
   #+end_src
3. Basic prompt (color is set/hidden by having the variables ~RS~, ~FGRN~ etc
   being blank strings for monochrome)
   #+begin_src shell :exports code
     PS1='${debian_chroot:+($debian_chroot)}'"${RS}${FGRN}"'\u@\h'"${RS}:${HC}${FBLE}"'\w'"${RS}"
   #+end_src
4. Enable jumping from prompt to prompt with Shift-{Left,Right} in [[https://github.com/mintty/mintty/wiki/CtrlSeqs#scroll-markers][mintty]]
   #+begin_src shell :exports code
     if [ "$MSYSCON" == "mintty.exe" ] ; then
         PS1="\[\033[?7711h\]$PS1"
     fi
   #+end_src

   WezTerm also [[https://wezfurlong.org/wezterm/config/lua/keyassignment/ScrollToPrompt.html][supports]] this assuming this [[https://gitlab.freedesktop.org/Per_Bothner/specifications/%2D/blob/master/proposals/prompts-data/shell-integration.bash][bash shell integration]] ([[https://gitlab.freedesktop.org/Per_Bothner/specifications/%2D/blob/4d2e1d75d4861a1d924895e106f8f016880e12a7/proposals/prompts-data/shell-integration.bash][permalink]]).
5. Show the git branch on the command line, adapted from Git-for-Windows
   #+begin_src shell :exports code
     function parse_git_branch () {
         # Was initially just this, but fails on Windows if 2 branches in the
         # repository differ only by their uppercase/lowercase spelling:
         #
         # git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
         #
         # What I would like to write, but is slower than the implementation below
         #
         # _s=$(git symbolic-ref HEAD 2> /dev/null);
         # if [ $? -eq 0 ]; then
         #     echo "$_s" | cut --fields=1,2 --delimiter=/ --complement
         # else
         #     # This case is still needed e.g. in the case of a detached HEAD
         #     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
         # fi
         #
         # I do not dare to use `set -o pipefail', so I have to put both calls to
         # git inside the same sub-shell before piping to sed to transform either
         # output.
         (git symbolic-ref HEAD || git branch) 2> /dev/null | \
             sed -n -e 's;^refs/heads/\(.*\);(\1);p' -e 's/^\* \(.*\)/(\1)/p'
     }
     PS1="$PS1 $FCYN\$(parse_git_branch)$RS\$ "
   #+end_src
6. If this is an xterm set the title to user@host:dir and optional
   MSYS/MINGW64 indication
   #+begin_src shell :exports code
     case "$TERM" in
     xterm*|rxvt*)
         PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w${MSYSTEM:+ $MSYSTEM}\a\]$PS1"
         ;;
     ,*)
         ;;
     esac
   #+end_src

* Font
** Input font
** [[https://github.com/be5invis/Iosevka/][Iosevka]]
1. Download ttc-iosevka-x.x.x.zip from [[https://github.com/be5invis/Iosevka/releases/tag/v2.3.3][releases]]
2. Unzip to ~/tmp~: ~unzip ~/Downloads/ttc-iosevka-2.3.3.zip -d /tmp~
3. ~for x in /tmp/iosevka-{italic,regular,bold,bolditalic}.ttc ; do start $x ; done~
* Info documentation browser
Add this to your profile:
#+begin_src shell :exports code
  # If the Emacs info node is missing, maybe that install-info was not called.
  #
  # for f in /mingw64/share/info/*.info /mingw64/share/info/*.info.gz ; do
  #     install-info --info-dir=/mingw64/share/info/ --debug $f
  # done
  emacs_prefix="/mingw64" # or "$(dirname "$(dirname "$(type -fp emacs)")")"?
  emacs_info="$emacs_prefix/share/info"
  if [ -r "$emacs_info/emacs.info" ] ; then
      case "$INFOPATH" in
          ( *$emacs_info* ) ;;
          ( * ) export INFOPATH="$INFOPATH:$emacs_info" ;;
      esac
  fi
  unset emacs_prefix emacs_info
#+end_src
* Useful aliases in =~/.bash_aliases=
For more ideas, see also [[https://github.com/fniessen/shell-leuven][shell-leuven]].

In your ~.bashrc~ or ~.bash_profile~
#+begin_src shell :exports code
  if [ -f ~/.bash_aliases ]; then
      . ~/.bash_aliases
  fi
#+end_src

** Changing directories
#+begin_src shell :exports code
  alias ..='cd ..'
  alias ...='cd ../..'
  alias ....='cd ../../..'
  alias .....='cd ../../../..'
#+end_src

Using [[https://github.com/ajeetdsouza/zoxide][zoxide]]: ~z~ is an alias for fast jumps to often used directories
#+begin_src shell :exports code
  if type -p zoxide > /dev/null ; then
      eval "$(zoxide init bash)"
      type -p fzf > /dev/null || unset -f zqi
      if type -p ugrep > /dev/null; then
          function __zoxide_zi_ugrep() {
              local __zoxide_result
              __zoxide_result="$(zoxide query --list -- "$@" | ugrep -Q)" && __zoxide_cd "$__zoxide_result"
          }
          # list directories from zoxide & select interactively with ugrep:
          alias zu=__zoxide_zi_ugrep
      fi
  fi
#+end_src

** Syncing directories
Because my unison is a Windows console application (installed with scoop), it
needs ~winpty~:
#+begin_src shell :exports code
  function unison ()
  {
      unison="$(type -fp unison)"
      if [ -z "$unison" ] ; then
          echo "unison not found" >&2
      fi
      if [ -z "$INSIDE_EMACS" ] ; then
          # Not inside shell buffer inside Emacs, assume we have a TTY and need to
          # translate it to Windows console.
          winpty="$(type -fp winpty)"
          if [ -z "$winpty" ] ; then
              "$unison" "$@"
          else
              "$winpty" "$unison" "$@"
          fi
      else
          # Inside shell buffer inside Emacs: unison manual recommends '-dumbtty'
          "$unison" -dumbtty "$@"
      fi
  }
#+end_src

** Jumping to directory of Emacs selected buffer
This probably breaks for directories with strange characters (space, double quotes etc)
#+begin_src shell :exports code
  if [ -z "$INSIDE_EMACS" ] ; then
      # having the cde alias inside Emacs shell buffers makes no sense
      if type -p emacsclient > /dev/null ; then
          # inspired by https://github.com/fniessen/shell-leuven: cd into directory that
          # currently selected window in emacs is in
          alias cde='cd "$(emacsclient -e '\''(with-current-buffer (window-buffer (selected-window))
                                                (expand-file-name default-directory))'\'' \
                           | tr -d '\''\n\r"'\'')"'
      fi
  fi
#+end_src

** Opening a dired buffer
This is actually a function, not an alias...
#+begin_src shell :exports code
  if type -p emacsclient > /dev/null ; then
      function dired ()
      {
          # dired [dirname]: open dired of (default current) directory inside Emacs
          if [ -z "$1" ]; then
              mixedDir="."
          else
              dir="$1"
              mixedDir="$(cygpath --mixed --absolute "$dir")"
          fi
          emacsclient --no-wait "$mixedDir"
          [ -z "$INSIDE_EMACS" ] && emacsclient --suppress-output --eval "(raise-frame)"
      }
      # NB: it would be nice to do complete -F _cd dired (to have CDPATH support
      # in completion, like the `cd' shell builtin does, but then our dired
      # function would need to support CDPATH as well; I don't use CDPATH at the
      # moment, so maybe it's not that useful...)
      complete -A directory dired
  fi
#+end_src

** Diffing with M-x ediff
#+begin_src shell :exports code
  function _ediff_function_leap_blindly {
      emacsclient --eval "(ediff \"$(cygpath --mixed --absolute "$1")\" \"$(cygpath --mixed --absolute "$2")\")"
  }

  function _ediff_function {
      left="$1"
      right="$2"
      if [ -r "$left" -a -r "$right" ] ; then
          _ediff_function_leap_blindly "$left" "$right"
      elif [ "$3" = "and" -a -r "$2" -a -r "$4" ] ; then
          # Handle output of `diff -q': Files x and y [differ]
          _ediff_function_leap_blindly "$2" "$4"
      elif [ "$2" = "and" -a -r "$1" -a -r "$3" ] ; then
          # Handle output of `diff -q': Files x and y [differ] where the
          # "Files" has not been copied into the command line
          _ediff_function_leap_blindly "$1" "$3"
      elif [ "$2 $3 $4" = 'and expected file' -a -r "$1" -a -r "$5" ] ; then
          # see also specflow-cp
          _ediff_function_leap_blindly "$1" "$5"
      else
          [ -r "$left" ] || echo >&2 "Can't read '$left'"
          [ -r "$right" ] || echo >&2 "Can't read '$right'"
      fi
  }
  alias ediff="_ediff_function"
#+end_src

** Exporting an environment variable from the shell to Emacs
From https://philjackson.github.io//emacs/shell/2021/07/26/export-an-environment-variable-to-emacs/
with some modifications (https://github.com/philjackson/philjackson.github.io/issues/1) to avoid
problems with double quotes in the variable's value.

#+begin_src shell :exports code
  function export-emacs {
      if [ "$(emacsclient -e t)" != 't' ]; then
          return 1
      fi

      for name in "${@}"; do
          value=$(eval echo \"\${${name}//\\\"/\\\\042}\")
          emacsclient -e "(setenv \"${name}\" \"${value}\")" >/dev/null
      done
  }
#+end_src

** docker
Stop docker from complaining it needs winpty:
#+begin_src shell :exports code
  function docker ()
  {
      winpty="$(type -fp winpty)"
      if [ -z "$winpty" ] ; then
          docker "$@"
      else
          "$winpty" docker "$@"
      fi
  }
#+end_src
* Useful scripts
** Emacs
*** ~ec~: an emacsclient wrapper
From this [[https://www.reddit.com/r/emacs/comments/fk7p49/piping_stdout_to_emacs/][reddit thread]]: this shorthand for emacsclient also accepts stdin as
input.

#+begin_src shell :exports code
  #!/bin/sh
  #
  # Use this instead of emacsclient: it also reads from stdin (unless called
  # from inside Emacs *shell* buffer):
  # ec file
  # ls | ec
  if [ -n "$INSIDE_EMACS" ]; then
      emacsclient -n "$@"
  elif [ -t 0 ]; then
      emacsclient -n "$@"
  else
      # stdin has data
      tmpf=$(mktemp --tmpdir emacs-edit.XXXXXXXX)
      cat > $tmpf
      trap 'rm -rf $tmpf; trap - EXIT; exit' EXIT INT HUP
      # let emacs-eval read from stdin: because it is called in a context
      # where stdin is the input (for this script actually), it will believe
      # it must look at its stdin, too):
      emacs-eval <<EOF
        (let ((dir default-directory))
          (find-file "$(cygpath --mixed --absolute "$tmpf")")
          (setq default-directory dir)
          (set-visited-file-name nil)
          (rename-buffer "*stdin*" t))
  EOF
  fi

  # Handle git output with 'a/file-name' and 'b/file-name' where 'a' and 'b' are actually just
  # used to indicate various versions.
  case "$1" in
      ( [ab]/* )
      if [ -r "$1" ] ; then
          main "$@"
      else
          emacs-eval <<EOF
          (let ((default-directory (locate-dominating-file "$(cygpath --mixed --absolute "$PWD")" ".git")))
            (find-file (substring "$1" 2)))
  EOF
      fi ;;
      ( * )
      main "$@" ;;
  esac
#+end_src

*** ~eu~: combine ~fd~ and ~ugrep~ to interactively select file to edit
#+begin_src shell :exports code
  if type -p ugrep > /dev/null; then
      if type -p fd > /dev/null; then
          function _emacsclient_ugrep {
              fd --path-separator "$@" // \
                  | ugrep -Q \
                  | tr -d '\r' \
                  | xargs -n 1 --delimiter='\n' emacsclient --no-wait
          }
          # list files with fd & select interactively with ugrep then edit
          alias eu=_emacsclient_ugrep
      fi
  fi
#+end_src

*** ~lu~: combine ~fd~ and ~ugrep~ to interactively select files to view with less or [[http://stahlworks.com/dev/depeche-view.html][dview]]
#+begin_src shell :exports code
  if type -p ugrep > /dev/null; then
      if type -p fd > /dev/null; then
          function _view_files_ugrep {
              readarray -t to_view <<< $(fd --path-separator // "$@" \
                                             | ugrep -Q \
                                             | tr -d '\r')
              if type -p dview.exe > /dev/null; then
                  # dview comes from http://stahlworks.com/dev/depeche-view.html.
                  # Install from https://github.com/pcrama/scoop-buckets with
                  # 'scoop install dview'.
                  dview.exe "${to_view[@]}"
              else
                  less "${to_view[@]}"
              fi
          }
          alias lu=_view_files_ugrep
      fi
  fi
#+end_src

*** ~emacs-eval~: evaluat elisp from the command line
Evaluates its stdin or command line arguments.
#+begin_src shell :exports code
  #!/bin/sh
  if [ -t 0 ]; then
      sexp="$*"
  else
      sexp="$(cat)"
  fi
  exec emacsclient -n -e "$sexp"
#+end_src

* Other setup actions to investigate
** TODO Setting a mouse trail
- [[https://msdn.microsoft.com/en-us/library/ms724947(v=VS.85).aspx][MSDN for SystemParametersInfo]]:
  - ~SPI_SETMOUSETRAILS~
  - ~SPI_SETMOUSESONAR~
  - ~SPI_SETMOUSEVANISH~
- [[http://www.strichnet.com/edit-and-apply-registry-settings-via-powershell/][How to call SystemParametersInfo from Powershell]]

** TODO git setup
*** [[http://blog.binchen.org/posts/integrate-delta-into-git/][delta]] diff viewer
* Firefox extensions
- GhostText
- Open in Browser
- Tridactyl (maybe Vim Vixen)

* COMMENT Obsolete
** Installation instructions
#+BEGIN_EXAMPLE
Set-ExecutionPolicy RemoteSigned -Scope Process

iex (new-object net.webclient).downloadstring('https://get.scoop.sh')

pause

scoop install git
$scoop=Resolve-Path "$(scoop prefix scoop)\..\..\.."
git clone https://github.com/pcrama/windows-workstation-configuration.git -o https-origin "$scoop\persist"

scoop update
# The prior update makes the apps\scoop\current directory into a .git working directory so that we can pull into it
cd "$scoop\apps\scoop\current"
git config --local user.name "Philippe Crama"
git config --local user.email "dontsendmespam@example.com"

scoop bucket add extras

scoop bucket add scoop-buckets https://github.com/pcrama/scoop-buckets.git

pause
scoop install zip ditto fd ripgrep smallcliutils greenshot emax64-pdumper

scoop install multicommander
# Fix up some directories that are not under source control
$multicmdsrc="$scoop\apps\multicommander\current\Config.original"
$multicmdest="$scoop\persist\multicommander\Config"
Copy-Item -Path "$multicmdsrc\TOTD" -Destination "$multicmdest" -Recurse
Copy-Item -Path "$multicmdsrc\Presets" -Destination "$multicmdest" -Recurse
Copy-Item -Path "$multicmdsrc\CfgProfiles" -Destination "$multicmdest" -Recurse
# On work PC, consider adding these favorites to $multicmdest/Favorites.xml:
#    <favitem name="pcr" type="" quickid="2">\\example.com\WQA\Personal-Temp\pcr</favitem>
#    <favitem name="2<user-id> (trash)" type="" quickid="3">S:\Trash\2<user-id>\</favitem>

scoop bucket add versions
scoop install -a 32bit python27
scoop install -a 32bit tomcat

scoop install dngrep dview sumatrapdf plantuml pdftk unison workrave flux jpegview winmerge paint.net

# This one actually asks for admin credentials
scoop install hack-font

. "$scoop\persist\_general\makeshortcut.ps1"
#+END_EXAMPLE

PS C:\Users\cramaph1\scoop> scoop list
Installed apps:

  7zip 21.07 [main]
  copyq 5.0.0 [extras]
  deepgit 4.2.1 [extras]
  delta 0.11.3 [main]
  dngrep 2.9.189.0 [scoop-buckets]
  dotnet-sdk 6.0.100 [main]
  doublecmd 1.0.2 [extras]
  duplicati-cli 2.0.5.1 [scoop-buckets]
  dust 0.7.5 [main]
  dview 1.7.3 [scoop-buckets]
  fd 8.3.1 [main]
  flutter 2.8.0 [extras]
  flux 4.120 [extras]
  fsviewer 7.5 [extras]
  fzf 0.28.0 [main]
  ghostscript 9.55.0 [main]
  git 2.34.1.windows.1 [main]
  gitui 0.19.0 [main]
  graphviz 2.38 [main]
  greenshot 1.2.10.6 [extras]
  innounp 0.50 [main]
  kdiff3 1.9.4 [extras]
  lessmsi 1.10.0 [main]
  multicommander 11.5.0.2842 [extras]
  nodejs 17.3.0 [main]
  notepadplusplus 8.2 [extras]
  okular 21.12.0-862 [extras]
  omnisharp 1.38.0 [main]
  oraclejre8 8u311 [java]
  paint.net 4.3.7 [extras]
  pandoc 2.16.2 [main]
  pdftk 2.02 [main]
  pdf-xchange-editor 9.2.359.0 [extras]
  plantuml 1.2021.16 [extras]
  qrcp 0.8.4 [main]
  rclone 1.57.0 [main]
  restic 0.12.1 [main]
  ripgrep 13.0.0 [main]
  roughgrep 3.0 [extras]
  smallcliutils 5 [scoop-buckets]
  snoop 3.0.1 [extras]
  sumatrapdf 3.3.3 [extras]
  touchcursor 1.7.1 [extras]
  ugrep 3.5.0 [main]
  unison 2.51.2 [main]
  vcxsrv 1.20.9.0 [extras]
  vlc 3.0.16 [extras]
  wincompose 0.9.6 [extras]
  winmerge 2.16.16 [extras]
  workrave 1.10.49 [extras]
  zeal 0.6.1 [extras]
  zoxide 0.8.0 [main]

** Tentative: Setting up with git-sdk-64
Maybe see https://github.com/lambdaheart/Haskell-Guide/blob/master/DevelopmentEnvironment.md
*** Git SDK (MINGW64 + MSYS2)
#+BEGIN_EXAMPLE
  $gitZip = "git-sdk-64-master.zip"
  $gitDest = "C:\gitsdk"
  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
  (New-Object System.Net.WebClient).DownloadFile("https://github.com/git-for-windows/git-sdk-64/archive/master.zip", $gitZip)
  Add-Type -assembly "system.io.compression.filesystem"
  [io.compression.zipfile]::ExtractToDirectory($gitZip, "C:\")
  Move-Item C:\git-sdk-64-master\ $gitDest
  & "$gitDest\msys2_shell.cmd" -msys2 -mintty -c "pacman -Syu"
  & "$gitDest\msys2_shell.cmd" -msys2 -mintty -c "pacman -Syu" # 2nd time to make sure
  & "$gitDest\msys2_shell.cmd" -msys2 -mintty -c "for p in MINGW-packages MSYS2-packages ; do sdk cd `$p ; done"
#+END_EXAMPLE

*** Mingw64/Emacs installation (instead of emax64 from scoop)
1. Download/unzip https://github.com/git-for-windows/git-sdk-64/archive/master.zip
2. ~msys2_shell.cmd -mingw64 -conemu~
3. From ~msys2~:
   1. ~pacman -Syu~
   2. ~pacman -Sy mingw-w64-x86_64-hunspell{,-en} mingw-w64-x86_64-librsvg mingw-w64-x86_64-emacs~

*** Scoop
**** Scoop installation & setup
#+BEGIN_EXAMPLE
  Set-ExecutionPolicy RemoteSigned -Scope Process
  iex (new-object net.webclient).downloadstring('https://get.scoop.sh')
  $Env:PATH += ";$gitDest\cmd"
  scoop update
  $scoop = Resolve-Path "$(scoop prefix scoop)\..\..\.."
  git clone https://github.com/pcrama/windows-workstation-configuration.git -o https-origin "$scoop\persist"
  cd "$scoop\persist"
  git config --local user.name "Philippe Crama"
  git config --local user.email "dontsendmespam@example.com"
  scoop bucket add extras
  scoop bucket add scoop-buckets https://github.com/pcrama/scoop-buckets.git
#+END_EXAMPLE

**** Install some apps
#+BEGIN_EXAMPLE
  scoop virustotal 7zip zip conemu ditto fd ripgrep smallcliutils greenshot keypirinha emax64 wincompose
  scoop install 7zip zip conemu ditto fd ripgrep smallcliutils greenshot keypirinha emax64 wincompose
#+END_EXAMPLE

**** Multicommander
#+BEGIN_EXAMPLE
  scoop install multicommander
  # Fix up some directories that are not under source control
  $multicmdsrc="$scoop\apps\multicommander\current\Config.original"
  $multicmdest="$scoop\persist\multicommander\Config"
  Copy-Item -Path "$multicmdsrc\TOTD" -Destination "$multicmdest" -Recurse
  Copy-Item -Path "$multicmdsrc\Presets" -Destination "$multicmdest" -Recurse
  Copy-Item -Path "$multicmdsrc\CfgProfiles" -Destination "$multicmdest" -Recurse
#+END_EXAMPLE

**** Python + Tomcat (?) 32 bit
#+BEGIN_EXAMPLE
  scoop bucket add versions
  scoop install -a 32bit python27
  # scoop install -a 32bit tomcat
#+END_EXAMPLE

**** More applications
#+BEGIN_EXAMPLE
  scoop install sumatrapdf plantuml unison workrave flux jpegview meld
#+END_EXAMPLE

**** NOT installed
#+BEGIN_EXAMPLE
  scoop install dngrep dview pdftk winmerge paint.net smartty
#+END_EXAMPLE

**** Create starter shortcut
#+BEGIN_EXAMPLE
  . "$scoop\persist\_general\makeshortcut.ps1"
#+END_EXAMPLE

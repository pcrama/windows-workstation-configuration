* Installation
** MSYS2
- Download installer from https://www.msys2.org
- Start installer as local admin
- Accept default installation folder ~C:\msys64~
- Once installation is finished, before clicking ~Next~, edit
  ~c:/msys64/etc/nsswitch.conf~ (see also cywgin documentation on
  [[https://cygwin.com/cygwin-ug-net/ntsec.html][nsswitch.conf]])
  #+begin_example
    # Begin /etc/nsswitch.conf
    passwd: files db
    group: files db
    db_enum: cache builtin
    db_home: /%H # home directory is $USERPROFILE formatted as POSIX path
    db_shell: cygwin desc
    db_gecos: cygwin desc
    # End /etc/nsswitch.conf
  #+end_example
  This will ensure that the user's home directories will be their Windows
  ~$USERPROFILE~ folders
- Close the shell (it's a local admin shell)
- Start a MSYS shell as normal user with ~c:\msys64\msys2_shell.cmd~ and run
  #+begin_src shell :exports code
    pacman -Syu
  #+end_src
  Follow instructions of killing the mintty window and restart the same MSYS
  shell again and run
  #+begin_src shell :exports code
    pacman -Su
  #+end_src
- Install software
  - mingw64/mingw-w64-x86_64-libxml2 # for eww in Emacs
  - mingw64/mingw-w64-x86_64-emacs
  - msys/openssh
  - mingw64/mingw-w64-x86_64-enchant
  - mingw64/mingw-w64-x86_64-hunspell-en
  - msys/git
  - msys/unzip
  - msys/zip
  - not really useful if there is no mail sync: mingw64/mingw-w64-x86_64-msmtp

  - There's a ~mingw64/mingw-w64-x86_64-graphviz~ in mingw64 but no plantuml.
    Installing plantuml from scoop would pull in graphviz from scoop too, so
    no need to install graphviz from MSYS2.
  - Do not install ~mingw64/mingw-w64-x86_64-gnupg~: its default home
    directory does not match ~$HOME/.gnupg~ and there's MSYS2's gnupg already.

** SCOOP
Some binaries will still be needed from Scoop:
- 7zip
- copyq
- dngrep
- fd
- graphviz
- greenshot
- imageglass
- multicommander
- paint.net
- pdftk
- pdf-xchange-editor
- plantuml
- ripgrep
- smallcliutils
- sumatrapdf
- unison
- wincompose
- winmerge

* SSH & GPG setup
All sharing the same gpg-agent, incorporated in =~/.bash_profile=:
#+begin_src shell :exports code
  _gpg_tty=$(tty) && {
      # Setting GPG_TTY is recommended by GPG documentation
      export GPG_TTY=$_gpg_tty
      # Actually this isn't related to GPG, but we reuse the fact that we know
      # there's a TTY and that thus filename completion should be handled by the
      # interactive shell and thus on Windows, filename completion should be
      # case-insensitive:
      [ -n "$MSYSTEM" ] && bind "set completion-ignore-case on"
  }
  unset _gpg_tty
  # The test involving the gnupg_SSH_AUTH_SOCK_by variable is for the case where
  # the agent is started as gpg-agent --daemon /bin/sh, in which case the shell
  # inherits the SSH_AUTH_SOCK variable from the parent, gpg-agent
  #
  # echo 'enable-ssh-support:0:1' | gpgconf.exe --change-option gpg-agent
  # echo 'allow-emacs-pinentry:0:1' | gpgconf.exe --change-option gpg-agent
  #
  # See also https://opensource.com/article/19/4/gpg-subkeys-ssh or
  # https://incenp.org/notes/2015/gnupg-for-ssh-authentication.html how to use a
  # GPG key instead of separate SSH key as private key for logging in
  unset SSH_AGENT_PID
  if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
      # export SSH_AUTH_SOCK=$(gpg-connect-agent.exe 'getinfo ssh_socket_name' '/bye' \
      #                            | sed -n -s '/^D/s/^D //p' )
      #
      # gpgconf --list-dirs does not autostart gpg-agent.  There's
      # gpg-connect-agent /bye, but then there's little difference with above
      # except that we use a high-level command rather than manipulating output
      # with sed.
      gpg-connect-agent /bye # starts gpg-agent if needed
      export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
  fi
#+end_src

When password authentication is needed, but there is no terminal, ask the user
for password with popup dialog (also in =~/.bash_profile=):
#+begin_src shell :exports code
  # For ssh-askpass emulation: if DISPLAY & SSH_ASKPASS are set, ssh will use
  # ssh-askpass if no TTY is available to query the password:
  _ssh_askpass="$HOME/bin/ssh-askpass-with-pinentry"
  if [ -x "$_ssh_askpass" ] ; then
      # Emacs would set DISPLAY to w32 anyway, so if it is unset, set it...
      [ -z "$DISPLAY" ] && export DISPLAY="w32"
      export SSH_ASKPASS=$_ssh_askpass
      # $_ssh_askpass content:
      ##!/bin/sh
      #cat <<EOF | pinentry | sed -n -e '/^OK/d' -e 's/^D //p'
      #SETDESC $@
      #SETPROMPT SSH Password
      #GETPIN
      #BYE
      #EOF
  fi
  unset _ssh_askpass
#+end_src

* Prompt tweaks
** Enable navigation between shell prompts
In =~/.bash_profile=:
#+begin_src shell :exports code
  # Enable jumping from prompt to prompt with Shift-{Left,Right} in mintty
  # https://github.com/mintty/mintty/wiki/CtrlSeqs#scroll-markers
  [ "$MSYSCON" == "mintty.exe" ] && PS1="${PS1//\n/\e[?7711l\\n}\e[?7711h"
#+end_src

** TODO Add Git branch information inside working folders
